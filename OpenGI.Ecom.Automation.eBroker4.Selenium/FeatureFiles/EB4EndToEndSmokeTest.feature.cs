// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenGI.Ecom.Automation.eBrokerDemo.Selenium.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("End to End smoke test")]
    public partial class EndToEndSmokeTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EB4EndToEndSmokeTest.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "End to End smoke test", @"			- Cannot test all functionality for a single page in a single scenario - so want to use as many functions as we can, can add scenarios as required?
			- Complete Policy Page
			- Submit and Verify we are on Vehicle Page
			- Go back to Policy Page and verify entries are the same
			- Submit again and Complete Vehicle Page
			- Since scenarios MUST be able to run independantly, we have to fill out every preceding page to go to the necxt page (and/or back to the previous page)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line 12
testRunner.Given("I have launched in to eBrokerDemo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 To Check if the current tab is correct")]
        [NUnit.Framework.CategoryAttribute("PolicyDetails")]
        public virtual void _01ToCheckIfTheCurrentTabIsCorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 To Check if the current tab is correct", new string[] {
                        "PolicyDetails"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 11
this.FeatureBackground();
#line 16
testRunner.Then("I should be on the POLICY tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02 To Check  if the correct tabs are present")]
        [NUnit.Framework.CategoryAttribute("PolicyDetails")]
        public virtual void _02ToCheckIfTheCorrectTabsArePresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 To Check  if the correct tabs are present", new string[] {
                        "PolicyDetails"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 11
this.FeatureBackground();
#line 21
 testRunner.Then("I should see 4 tabs on the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tab"});
            table1.AddRow(new string[] {
                        "POLICY"});
            table1.AddRow(new string[] {
                        "VEHICLE"});
            table1.AddRow(new string[] {
                        "DRIVER"});
            table1.AddRow(new string[] {
                        "QUOTE"});
#line 22
 testRunner.And("I should see the following tabs", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03 To Check if correct questions are displayed")]
        [NUnit.Framework.CategoryAttribute("PolicyDetails")]
        public virtual void _03ToCheckIfCorrectQuestionsAreDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 To Check if correct questions are displayed", new string[] {
                        "PolicyDetails"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 11
this.FeatureBackground();
#line 31
 testRunner.Then("I should see 6 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table2.AddRow(new string[] {
                        "Title"});
            table2.AddRow(new string[] {
                        "FirstName"});
            table2.AddRow(new string[] {
                        "Surname"});
            table2.AddRow(new string[] {
                        "ContactNumber"});
            table2.AddRow(new string[] {
                        "PrimaryEmail"});
            table2.AddRow(new string[] {
                        "CoverStartDate"});
#line 32
 testRunner.And("the following questions should be displayed", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04 Fill in all policy details and submit, then return to page")]
        [NUnit.Framework.CategoryAttribute("PolicyDetails")]
        public virtual void _04FillInAllPolicyDetailsAndSubmitThenReturnToPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 Fill in all policy details and submit, then return to page", new string[] {
                        "PolicyDetails"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 11
this.FeatureBackground();
#line 44
testRunner.When("I click the \"MrButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
testRunner.Then("the \"MrButton\" button should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table3.AddRow(new string[] {
                        "FirstName",
                        "Test"});
            table3.AddRow(new string[] {
                        "Surname",
                        "Test"});
            table3.AddRow(new string[] {
                        "ContactNumber",
                        "012347566"});
            table3.AddRow(new string[] {
                        "PrimaryEmail",
                        "test@test.com"});
            table3.AddRow(new string[] {
                        "CoverStartDate",
                        "01/01/2017"});
#line 46
testRunner.When("I populate the following questions", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table4.AddRow(new string[] {
                        "FirstName",
                        "Test"});
            table4.AddRow(new string[] {
                        "Surname",
                        "Test"});
            table4.AddRow(new string[] {
                        "ContactNumber",
                        "012347566"});
            table4.AddRow(new string[] {
                        "PrimaryEmail",
                        "test@test.com"});
            table4.AddRow(new string[] {
                        "CoverStartDate",
                        "01/01/2017"});
#line 55
testRunner.Then("the following questions should have the following information", ((string)(null)), table4, "Then ");
#line 65
testRunner.When("I click Next expecting an accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
testRunner.Then("I should be on the VEHICLE tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
testRunner.When("I click Back expecting an accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table5.AddRow(new string[] {
                        "FirstName",
                        "Test"});
            table5.AddRow(new string[] {
                        "Surname",
                        "Test"});
            table5.AddRow(new string[] {
                        "ContactNumber",
                        "012347566"});
            table5.AddRow(new string[] {
                        "PrimaryEmail",
                        "test@test.com"});
            table5.AddRow(new string[] {
                        "CoverStartDate",
                        "01/01/2017"});
#line 70
testRunner.Then("the following questions should have the following information", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
