// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenGI.Ecom.Automation.TPR.Selenium.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Business Activities")]
    public partial class BusinessActivitiesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BusinessActivities.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Business Activities", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have launched in to TPR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I have shown the Business Activities accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the correct questions are displayed on the Business Activities accordion")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheCorrectQuestionsAreDisplayedOnTheBusinessActivitiesAccordion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the correct questions are displayed on the Business Activities accordion", new string[] {
                        "Integration"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 12
 testRunner.Then("I should see 4 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table1.AddRow(new string[] {
                        "QualificationRequired"});
            table1.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table1.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table1.AddRow(new string[] {
                        "AccreditedTraining"});
#line 13
 testRunner.And("the following questions should be displayed", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Business Activities questions are mandatory")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheBusinessActivitiesQuestionsAreMandatory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Business Activities questions are mandatory", new string[] {
                        "Integration"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 22
 testRunner.When("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table2.AddRow(new string[] {
                        "QualificationRequired"});
            table2.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table2.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table2.AddRow(new string[] {
                        "AccreditedTraining"});
#line 23
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check answering the Qualification Required question with a yes displays the Are Y" +
            "ou Qualified question")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckAnsweringTheQualificationRequiredQuestionWithAYesDisplaysTheAreYouQualifiedQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check answering the Qualification Required question with a yes displays the Are Y" +
                    "ou Qualified question", new string[] {
                        "Integration"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table3.AddRow(new string[] {
                        "QualificationRequired",
                        "yes"});
#line 32
 testRunner.When("I populate the following questions", ((string)(null)), table3, "When ");
#line 35
 testRunner.Then("I should see 5 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table4.AddRow(new string[] {
                        "QualificationRequired"});
            table4.AddRow(new string[] {
                        "AreYouQualified"});
            table4.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table4.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table4.AddRow(new string[] {
                        "AccreditedTraining"});
#line 36
 testRunner.And("the following questions should be displayed", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Are You Qualified question is mandatory when displayed")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheAreYouQualifiedQuestionIsMandatoryWhenDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Are You Qualified question is mandatory when displayed", new string[] {
                        "Integration"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table5.AddRow(new string[] {
                        "QualificationRequired",
                        "yes"});
#line 46
 testRunner.When("I populate the following questions", ((string)(null)), table5, "When ");
#line 49
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table6.AddRow(new string[] {
                        "AreYouQualified"});
#line 50
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check answering the Business Activities Are You A Member Of A Professional Associ" +
            "ation question with a no displays the What Is Your Main Profession question")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckAnsweringTheBusinessActivitiesAreYouAMemberOfAProfessionalAssociationQuestionWithANoDisplaysTheWhatIsYourMainProfessionQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check answering the Business Activities Are You A Member Of A Professional Associ" +
                    "ation question with a no displays the What Is Your Main Profession question", new string[] {
                        "Integration"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table7.AddRow(new string[] {
                        "MemberOfProfessionalAssociation",
                        "no"});
#line 56
 testRunner.When("I populate the following questions", ((string)(null)), table7, "When ");
#line 59
 testRunner.Then("I should see 5 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table8.AddRow(new string[] {
                        "QualificationRequired"});
            table8.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table8.AddRow(new string[] {
                        "WhatIsYourMainProfession"});
            table8.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table8.AddRow(new string[] {
                        "AccreditedTraining"});
#line 60
 testRunner.And("the following questions should be displayed", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Business Activities What Is Your Main Profession Question is mandatory " +
            "when displayed")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheBusinessActivitiesWhatIsYourMainProfessionQuestionIsMandatoryWhenDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Business Activities What Is Your Main Profession Question is mandatory " +
                    "when displayed", new string[] {
                        "Integration"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table9.AddRow(new string[] {
                        "MemberOfProfessionalAssociation",
                        "no"});
#line 70
 testRunner.When("I populate the following questions", ((string)(null)), table9, "When ");
#line 73
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table10.AddRow(new string[] {
                        "WhatIsYourMainProfession"});
#line 74
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check answering the Business Activities Are You A Member Of A Professional Associ" +
            "ation question with a yes displays the two additional Professional Association q" +
            "uestions")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckAnsweringTheBusinessActivitiesAreYouAMemberOfAProfessionalAssociationQuestionWithAYesDisplaysTheTwoAdditionalProfessionalAssociationQuestions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check answering the Business Activities Are You A Member Of A Professional Associ" +
                    "ation question with a yes displays the two additional Professional Association q" +
                    "uestions", new string[] {
                        "Integration"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table11.AddRow(new string[] {
                        "MemberOfProfessionalAssociation",
                        "yes"});
#line 80
 testRunner.When("I populate the following questions", ((string)(null)), table11, "When ");
#line 83
 testRunner.Then("I should see 6 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table12.AddRow(new string[] {
                        "QualificationRequired"});
            table12.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table12.AddRow(new string[] {
                        "ProfessionalAssociation"});
            table12.AddRow(new string[] {
                        "ProfessionalAssociationMemberNumber"});
            table12.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table12.AddRow(new string[] {
                        "AccreditedTraining"});
#line 84
 testRunner.And("the following questions should be displayed", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Business Activities Professional Association question is mandatory when" +
            " displayed")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheBusinessActivitiesProfessionalAssociationQuestionIsMandatoryWhenDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Business Activities Professional Association question is mandatory when" +
                    " displayed", new string[] {
                        "Integration"});
#line 94
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table13.AddRow(new string[] {
                        "MemberOfProfessionalAssociation",
                        "yes"});
#line 95
 testRunner.When("I populate the following questions", ((string)(null)), table13, "When ");
#line 98
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table14.AddRow(new string[] {
                        "ProfessionalAssociation"});
#line 99
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check I can search for Professions from the autocomplete list")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckICanSearchForProfessionsFromTheAutocompleteList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check I can search for Professions from the autocomplete list", new string[] {
                        "Integration"});
#line 104
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table15.AddRow(new string[] {
                        "MemberOfProfessionalAssociation",
                        "no"});
#line 105
 testRunner.When("I populate the following questions", ((string)(null)), table15, "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table16.AddRow(new string[] {
                        "WhatIsYourMainProfession"});
#line 108
 testRunner.And("I populate the autocomplete list for following questions", ((string)(null)), table16, "And ");
#line 111
 testRunner.Then("The autocomplete list should be non-empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check I can select a Profession from the autocomplete list")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckICanSelectAProfessionFromTheAutocompleteList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check I can select a Profession from the autocomplete list", new string[] {
                        "Integration"});
#line 115
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table17.AddRow(new string[] {
                        "MemberOfProfessionalAssociation",
                        "no"});
            table17.AddRow(new string[] {
                        "WhatIsYourMainProfession",
                        "unicorn"});
#line 116
 testRunner.When("I populate the following questions", ((string)(null)), table17, "When ");
#line 120
 testRunner.Then("I should see the autocomplete list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.When("I click the \"Unicorn Healing\" autocomplete item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table18.AddRow(new string[] {
                        "WhatIsYourMainProfession",
                        "Unicorn Healing"});
#line 122
 testRunner.Then("the following questions should have the following information", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check answering the Business Activities Do You Require Cover For Additional Activ" +
            "ities question with a yes displays the Additional Activities question")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckAnsweringTheBusinessActivitiesDoYouRequireCoverForAdditionalActivitiesQuestionWithAYesDisplaysTheAdditionalActivitiesQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check answering the Business Activities Do You Require Cover For Additional Activ" +
                    "ities question with a yes displays the Additional Activities question", new string[] {
                        "Integration"});
#line 127
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table19.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 128
 testRunner.When("I populate the following questions", ((string)(null)), table19, "When ");
#line 131
 testRunner.Then("I should see 5 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table20.AddRow(new string[] {
                        "QualificationRequired"});
            table20.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table20.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table20.AddRow(new string[] {
                        "AdditionalActivityOne"});
            table20.AddRow(new string[] {
                        "AccreditedTraining"});
#line 132
 testRunner.And("the following questions should be displayed", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Business Activities accordion only allows you to add ten Additional Act" +
            "ivities")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheBusinessActivitiesAccordionOnlyAllowsYouToAddTenAdditionalActivities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Business Activities accordion only allows you to add ten Additional Act" +
                    "ivities", new string[] {
                        "Integration"});
#line 141
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table21.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 142
 testRunner.When("I populate the following questions", ((string)(null)), table21, "When ");
#line 145
 testRunner.And("I click the \"AddAdditionalActivityButton\" button 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.Then("the \"AddAdditionalActivityButton\" button should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 147
 testRunner.When("I click the \"AddAdditionalActivityButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
 testRunner.Then("the \"AddAdditionalActivityButton\" button should not be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 149
 testRunner.Then("I should see 14 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table22.AddRow(new string[] {
                        "QualificationRequired"});
            table22.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table22.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table22.AddRow(new string[] {
                        "AdditionalActivityOne"});
            table22.AddRow(new string[] {
                        "AdditionalActivityTwo"});
            table22.AddRow(new string[] {
                        "AdditionalActivityThree"});
            table22.AddRow(new string[] {
                        "AdditionalActivityFour"});
            table22.AddRow(new string[] {
                        "AdditionalActivityFive"});
            table22.AddRow(new string[] {
                        "AdditionalActivitySix"});
            table22.AddRow(new string[] {
                        "AdditionalActivitySeven"});
            table22.AddRow(new string[] {
                        "AdditionalActivityEight"});
            table22.AddRow(new string[] {
                        "AdditionalActivityNine"});
            table22.AddRow(new string[] {
                        "AdditionalActivityTen"});
            table22.AddRow(new string[] {
                        "AccreditedTraining"});
#line 150
 testRunner.And("the following questions should be displayed", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Business Activities accordion allows you to add Additional Activities w" +
            "hen you remove the tenth additional activity")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheBusinessActivitiesAccordionAllowsYouToAddAdditionalActivitiesWhenYouRemoveTheTenthAdditionalActivity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Business Activities accordion allows you to add Additional Activities w" +
                    "hen you remove the tenth additional activity", new string[] {
                        "Integration"});
#line 168
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table23.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 169
 testRunner.When("I populate the following questions", ((string)(null)), table23, "When ");
#line 172
 testRunner.And("I click the \"AddAdditionalActivityButton\" button 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.Then("the \"AddAdditionalActivityButton\" button should not be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 174
 testRunner.When("I click the \"RemoveAdditionalActivityTenButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
 testRunner.Then("the \"AddAdditionalActivityButton\" button should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Business Activities Additional Activities questions are mandatory if di" +
            "splayed")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheBusinessActivitiesAdditionalActivitiesQuestionsAreMandatoryIfDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Business Activities Additional Activities questions are mandatory if di" +
                    "splayed", new string[] {
                        "Integration"});
#line 178
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table24.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 179
 testRunner.When("I populate the following questions", ((string)(null)), table24, "When ");
#line 182
 testRunner.And("I click the \"AddAdditionalActivityButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table25.AddRow(new string[] {
                        "AdditionalActivityOne"});
            table25.AddRow(new string[] {
                        "AdditionalActivityTwo"});
#line 184
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check I can search for Additional Activities from the autocomplete list")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckICanSearchForAdditionalActivitiesFromTheAutocompleteList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check I can search for Additional Activities from the autocomplete list", new string[] {
                        "Integration"});
#line 190
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table26.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 191
 testRunner.When("I populate the following questions", ((string)(null)), table26, "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table27.AddRow(new string[] {
                        "AdditionalActivityOne"});
#line 194
 testRunner.And("I populate the autocomplete list for following questions", ((string)(null)), table27, "And ");
#line 197
 testRunner.Then("The autocomplete list should be non-empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check I can select an Additional Activity from the autocomplete list")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckICanSelectAnAdditionalActivityFromTheAutocompleteList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check I can select an Additional Activity from the autocomplete list", new string[] {
                        "Integration"});
#line 201
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table28.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 202
 testRunner.When("I populate the following questions", ((string)(null)), table28, "When ");
#line 205
 testRunner.And("I click the \"AddAdditionalActivityButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table29.AddRow(new string[] {
                        "AdditionalActivityOne"});
#line 206
 testRunner.And("I select the first available item from the autocomplete list", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table30.AddRow(new string[] {
                        "AdditionalActivityOne",
                        "<RandomText>"});
            table30.AddRow(new string[] {
                        "AdditionalActivityTwo",
                        ""});
#line 209
 testRunner.Then("the following questions should have the following information", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check removing an Additional Activity keeps the other Additional Activities")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckRemovingAnAdditionalActivityKeepsTheOtherAdditionalActivities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check removing an Additional Activity keeps the other Additional Activities", new string[] {
                        "Integration"});
#line 215
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table31.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities",
                        "yes"});
#line 216
 testRunner.When("I populate the following questions", ((string)(null)), table31, "When ");
#line 219
 testRunner.And("I click the \"AddAdditionalActivityButton\" button 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table32.AddRow(new string[] {
                        "AdditionalActivityOne",
                        "Unicorn Healing"});
#line 220
 testRunner.And("I populate the following questions", ((string)(null)), table32, "And ");
#line 223
 testRunner.Then("I should see the autocomplete list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table33.AddRow(new string[] {
                        "AdditionalActivityThree",
                        "Egg Cleansing"});
#line 224
 testRunner.When("I populate the following questions", ((string)(null)), table33, "When ");
#line 227
 testRunner.Then("I should see the autocomplete list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table34.AddRow(new string[] {
                        "AdditionalActivityOne",
                        "Unicorn Healing"});
            table34.AddRow(new string[] {
                        "AdditionalActivityTwo",
                        ""});
            table34.AddRow(new string[] {
                        "AdditionalActivityThree",
                        "Egg Cleansing"});
#line 228
 testRunner.And("the following questions should have the following information", ((string)(null)), table34, "And ");
#line 233
 testRunner.When("I click the \"RemoveAdditionalActivityTwoButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table35.AddRow(new string[] {
                        "AdditionalActivityOne",
                        "Unicorn Healing"});
            table35.AddRow(new string[] {
                        "AdditionalActivityTwo",
                        "Egg Cleansing"});
#line 234
 testRunner.Then("the following questions should have the following information", ((string)(null)), table35, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check answering the qualification required question shows the required qualificat" +
            "ions? question")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckAnsweringTheQualificationRequiredQuestionShowsTheRequiredQualificationsQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check answering the qualification required question shows the required qualificat" +
                    "ions? question", new string[] {
                        "Integration"});
#line 241
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table36.AddRow(new string[] {
                        "QualificationRequired",
                        "yes"});
#line 242
 testRunner.When("I populate the following questions", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table37.AddRow(new string[] {
                        "QualificationRequired"});
            table37.AddRow(new string[] {
                        "AreYouQualified"});
            table37.AddRow(new string[] {
                        "MemberOfProfessionalAssociation"});
            table37.AddRow(new string[] {
                        "DoYouRequireCoverForAdditionalActivities"});
            table37.AddRow(new string[] {
                        "AccreditedTraining"});
#line 245
 testRunner.Then("the following questions should be displayed", ((string)(null)), table37, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the required qualifications? question is mandatory when it is shown")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheRequiredQualificationsQuestionIsMandatoryWhenItIsShown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the required qualifications? question is mandatory when it is shown", new string[] {
                        "Integration"});
#line 254
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table38.AddRow(new string[] {
                        "QualificationRequired",
                        "yes"});
#line 255
 testRunner.When("I populate the following questions", ((string)(null)), table38, "When ");
#line 258
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table39.AddRow(new string[] {
                        "AreYouQualified"});
#line 259
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table39, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check completing the Business Activities accordion moves back to the Your Details" +
            " accordion")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckCompletingTheBusinessActivitiesAccordionMovesBackToTheYourDetailsAccordion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check completing the Business Activities accordion moves back to the Your Details" +
                    " accordion", new string[] {
                        "Integration"});
#line 264
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 265
 testRunner.When("I complete the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 266
 testRunner.And("I click Next expecting an accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.Then("I should move to the Your Details accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
