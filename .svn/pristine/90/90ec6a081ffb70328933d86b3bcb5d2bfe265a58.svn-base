// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenGI.Ecom.Automation.TPR.Selenium.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Declarations")]
    public partial class DeclarationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Declarations.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Declarations", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have launched in to TPR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I have shown the Declarations accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the correct questions are displayed on the Declarations accordion")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheCorrectQuestionsAreDisplayedOnTheDeclarationsAccordion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the correct questions are displayed on the Declarations accordion", new string[] {
                        "Integration"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 12
 testRunner.Then("I should see 7 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table1.AddRow(new string[] {
                        "HasNonMotoringConviction"});
            table1.AddRow(new string[] {
                        "HasEverBeenBankrupt"});
            table1.AddRow(new string[] {
                        "HasCCJs"});
            table1.AddRow(new string[] {
                        "HasEverBeenRefusedOrDeclinedInsurance"});
            table1.AddRow(new string[] {
                        "HasEverHadInsuranceCancelled"});
            table1.AddRow(new string[] {
                        "HasBeenDisqualifiedAsDirector"});
            table1.AddRow(new string[] {
                        "AnyIncidentsLeadingToAllegationOrClaim"});
#line 13
 testRunner.And("the following questions should be displayed", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Declarations questions are mandatory")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheDeclarationsQuestionsAreMandatory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Declarations questions are mandatory", new string[] {
                        "Integration"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 25
 testRunner.When("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table2.AddRow(new string[] {
                        "HasNonMotoringConviction"});
            table2.AddRow(new string[] {
                        "HasEverBeenBankrupt"});
            table2.AddRow(new string[] {
                        "HasCCJs"});
            table2.AddRow(new string[] {
                        "HasEverBeenRefusedOrDeclinedInsurance"});
            table2.AddRow(new string[] {
                        "HasEverHadInsuranceCancelled"});
            table2.AddRow(new string[] {
                        "HasBeenDisqualifiedAsDirector"});
            table2.AddRow(new string[] {
                        "AnyIncidentsLeadingToAllegationOrClaim"});
#line 26
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check completing the Declarations accordion moves to the Your Business accordion")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckCompletingTheDeclarationsAccordionMovesToTheYourBusinessAccordion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check completing the Declarations accordion moves to the Your Business accordion", new string[] {
                        "Integration"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
 testRunner.When("I complete the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.And("I click Next expecting an accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("I should move to the Your Business accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
