// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenGI.Ecom.Automation.eBrokerDemo.Selenium.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SmokeTest")]
    public partial class SmokeTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "eB4SmokeTest.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SmokeTest", "This test will be run to make a quick check on eBroker4 application", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
testRunner.Given("I have launched in to eBrokerDemo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 Fill in all pages and get to Summary page")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        public virtual void _01FillInAllPagesAndGetToSummaryPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 Fill in all pages and get to Summary page", new string[] {
                        "SmokeTest"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 10
testRunner.When("I click the \"MrButton\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
testRunner.Then("the \"MrButton\" button should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table1.AddRow(new string[] {
                        "FirstName",
                        "Test"});
            table1.AddRow(new string[] {
                        "Surname",
                        "Test"});
            table1.AddRow(new string[] {
                        "ContactNumber",
                        "012347566"});
            table1.AddRow(new string[] {
                        "CoverStartDate",
                        "11/11/2016"});
            table1.AddRow(new string[] {
                        "PrimaryEmail",
                        "test@test.com"});
#line 12
testRunner.When("I populate the following questions", ((string)(null)), table1, "When ");
#line 20
testRunner.When("I click Next expecting an accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
testRunner.When("I click the \"OwnerAndUse_OwnerYes\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table2.AddRow(new string[] {
                        "OwnerAndUse_PurchaseDate",
                        "01/01/2001"});
#line 23
testRunner.When("I populate the following questions", ((string)(null)), table2, "When ");
#line 27
testRunner.When("I click the \"OwnerAndUse_WhereDoYouPark_Other\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data",
                        "Option"});
            table3.AddRow(new string[] {
                        "OwnerAndUse_WhereDoYouPark_Other_Select",
                        "UnlockedBuilding",
                        "OwnerAndUse_WhoOwnsYourCar_OtherSelect_Option"});
#line 28
testRunner.When("I select the following questions", ((string)(null)), table3, "When ");
#line 31
testRunner.When("I click the \"CoverDetails_LevelOfCover_Comp\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
testRunner.When("I click the \"CoverDetails_DoYouNeedWS\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data",
                        "Option"});
            table4.AddRow(new string[] {
                        "CoverDetails_Q2",
                        "£50",
                        "CoverDetails_Q2_Option"});
            table4.AddRow(new string[] {
                        "CoverDetails_Q3",
                        "2",
                        "CoverDetails_Q3_Option"});
            table4.AddRow(new string[] {
                        "CoverDetails_Q4",
                        "Insured Only",
                        "CoverDetails_Q4_Option"});
#line 33
testRunner.When("I select the following questions", ((string)(null)), table4, "When ");
#line 38
testRunner.When("I click the \"AdditionalDrivers_Four\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
testRunner.When("I click the \"Vehicle_Next_Button\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
