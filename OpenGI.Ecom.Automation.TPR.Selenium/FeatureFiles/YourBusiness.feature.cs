// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenGI.Ecom.Automation.TPR.Selenium.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("YourBusiness")]
    public partial class YourBusinessFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "YourBusiness.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "YourBusiness", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have launched in to TPR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I have shown the Your Business accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the correct questions are displayed on the Your Business accordion")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheCorrectQuestionsAreDisplayedOnTheYourBusinessAccordion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the correct questions are displayed on the Your Business accordion", new string[] {
                        "Integration"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 12
 testRunner.Then("I should see 3 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table1.AddRow(new string[] {
                        "IsLimitedCompany"});
            table1.AddRow(new string[] {
                        "WorksOutsideUK"});
            table1.AddRow(new string[] {
                        "CoverStartDate"});
#line 13
 testRunner.And("the following questions should be displayed", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Your Business questions are mandatory")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheYourBusinessQuestionsAreMandatory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Your Business questions are mandatory", new string[] {
                        "Integration"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 21
 testRunner.When("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table2.AddRow(new string[] {
                        "IsLimitedCompany"});
            table2.AddRow(new string[] {
                        "WorksOutsideUK"});
#line 22
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Your Business Do You Work Outside The UK question displays the Are You " +
            "Based In The UK question")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheYourBusinessDoYouWorkOutsideTheUKQuestionDisplaysTheAreYouBasedInTheUKQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Your Business Do You Work Outside The UK question displays the Are You " +
                    "Based In The UK question", new string[] {
                        "Integration"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data",
                        "Comment"});
            table3.AddRow(new string[] {
                        "WorksOutsideUK",
                        "yes",
                        ""});
            table3.AddRow(new string[] {
                        "BasedInUK",
                        "no",
                        "Hack to reset the form"});
#line 29
 testRunner.When("I populate the following questions", ((string)(null)), table3, "When ");
#line 33
 testRunner.Then("I should see 4 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table4.AddRow(new string[] {
                        "IsLimitedCompany"});
            table4.AddRow(new string[] {
                        "WorksOutsideUK"});
            table4.AddRow(new string[] {
                        "BasedInUK"});
            table4.AddRow(new string[] {
                        "CoverStartDate"});
#line 34
 testRunner.And("the following questions should be displayed", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Your Business Are You Based In The UK question is mandatory when displa" +
            "yed")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheYourBusinessAreYouBasedInTheUKQuestionIsMandatoryWhenDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Your Business Are You Based In The UK question is mandatory when displa" +
                    "yed", new string[] {
                        "Integration"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table5.AddRow(new string[] {
                        "WorksOutsideUK",
                        "yes"});
#line 43
 testRunner.When("I populate the following questions", ((string)(null)), table5, "When ");
#line 46
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table6.AddRow(new string[] {
                        "BasedInUK"});
#line 47
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Your Business Are You Based In The UK question displays the Do You Own " +
            "Property In The Countries You Work In Other Than The UK question")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheYourBusinessAreYouBasedInTheUKQuestionDisplaysTheDoYouOwnPropertyInTheCountriesYouWorkInOtherThanTheUKQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Your Business Are You Based In The UK question displays the Do You Own " +
                    "Property In The Countries You Work In Other Than The UK question", new string[] {
                        "Integration"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table7.AddRow(new string[] {
                        "WorksOutsideUK",
                        "yes"});
            table7.AddRow(new string[] {
                        "BasedInUK",
                        "yes"});
#line 53
 testRunner.When("I populate the following questions", ((string)(null)), table7, "When ");
#line 57
 testRunner.Then("I should see 5 questions on the current accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table8.AddRow(new string[] {
                        "IsLimitedCompany"});
            table8.AddRow(new string[] {
                        "WorksOutsideUK"});
            table8.AddRow(new string[] {
                        "BasedInUK"});
            table8.AddRow(new string[] {
                        "OwnsPropertiesOutsideUK"});
            table8.AddRow(new string[] {
                        "CoverStartDate"});
#line 58
 testRunner.And("the following questions should be displayed", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the Your Business Do You Own Property In The Countries You Work In Other Th" +
            "an The UK question is mandatory when displayed")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckTheYourBusinessDoYouOwnPropertyInTheCountriesYouWorkInOtherThanTheUKQuestionIsMandatoryWhenDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the Your Business Do You Own Property In The Countries You Work In Other Th" +
                    "an The UK question is mandatory when displayed", new string[] {
                        "Integration"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question",
                        "Data"});
            table9.AddRow(new string[] {
                        "WorksOutsideUK",
                        "yes"});
            table9.AddRow(new string[] {
                        "BasedInUK",
                        "yes"});
#line 68
 testRunner.When("I populate the following questions", ((string)(null)), table9, "When ");
#line 72
 testRunner.And("I click Next expecting no accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Question"});
            table10.AddRow(new string[] {
                        "OwnsPropertiesOutsideUK"});
#line 73
 testRunner.Then("the following questions should have an error displayed", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check completing the Your Business accordion moves you to the Business Activities" +
            " accordion")]
        [NUnit.Framework.CategoryAttribute("Integration")]
        public virtual void CheckCompletingTheYourBusinessAccordionMovesYouToTheBusinessActivitiesAccordion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check completing the Your Business accordion moves you to the Business Activities" +
                    " accordion", new string[] {
                        "Integration"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 79
 testRunner.When("I complete the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.And("I click Next expecting an accordion transition", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.Then("I should move to the Business Activities accordion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
